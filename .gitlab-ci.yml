stages:
- test
- sonarqube-runner
- build
- deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  BRANCH_NAME: $CI_COMMIT_REF_NAME
  SOURCES: eopf
  TESTS: tests
  REPORTS: .reports
  # SonarQube
  SQ_PROJECTKEY: eopf-cpm
  SQ_PROJECTNAME: 'EOPF CPM'
  SQ_ENCODING: UTF-8
  SQ_PROJECTBASE: .
  SQ_LANGUAGE: py


workflow:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    variables:
      BRANCH_NAME: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "develop"
    variables:
      BRANCH_NAME: $CI_COMMIT_BRANCH
  - if: $CI_COMMIT_TAG
    variables:
      BRANCH_NAME: $CI_COMMIT_TAG

#############################################
############ PIP SECTION #################
#############################################
linter:
  stage: test
  image: python:3.9
  before_script:
  - pip install .[linter]
  script:
  - >-
    python -m flake8 ${SOURCES} ${TESTS}
    --output-file linter.txt
  - python -m flake8 ${SOURCES} ${TESTS}
  artifacts:
    expire_in: 1h
    paths:
    - linter.txt

formater:
  stage: test
  image: python:3.9
  before_script:
  - pip install .[formatter]
  script:
  - python -m black --check .
  - python -m isort ${SOURCES} ${TESTS} --check --diff

typing:
  stage: test
  image: python:3.9
  before_script:
  - pip install .[typing]
  script:
  - python -m mypy ${SOURCES}

unit-tests:
  stage: test
  image: python:3.9
  before_script:
  - pip install .[tests] .[notebook]
  script:
  - >-
    python -m pytest
    --cov=${SOURCES}
    --junit-xml=${REPORTS}/TEST-pytests.xml
    --cov-report=term-missing
    --cov-report=xml:${REPORTS}/coverage.xml
    -m unit
    -m "not need_files"
  artifacts:
    expire_in: 1h
    reports:
      cobertura: $REPORTS/coverage.xml
      junit:
        - $REPORTS/TEST-*.xml
    paths:
    - $REPORTS
    - .coverage

integration-tests:
  stage: test
  image: python:3.9
  before_script:
  - pip install .[tests] .[notebook]
  needs:
  - unit-tests
  dependencies:
  - unit-tests
  script:
  - >-
    python -m pytest
    --cov=${SOURCES}
    --cov-report=term-missing
    --cov-append
    -m integration
    -m "not need_files"

security:
  stage: test
  image: python:3.9
  before_script:
  - pip install .[security]
  script:
  - >-
    python -m bandit -c bandit.yml -r ${SOURCES}
    -f json -o vulnerability.json
  - python -m bandit -c bandit.yml -r ${SOURCES}
  artifacts:
    expire_in: 1h
    paths:
    - vulnerability.json

deps-sec:
  stage: test
  image: python:3.9
  before_script:
  - pip install .[security]
  script:
  - safety check --full-report
  allow_failure: true

docs-cov:
  stage: test
  image: python:3.9
  before_script:
  - pip install .[doc-cov]
  script:
  - docstr-coverage -f -P -m -F 30 ${SOURCES} -b docstrcov.svg
  artifacts:
    paths:
    - docstrcov.svg
  allow_failure: true

complexity:
  stage: test
  image: python:3.9
  before_script:
  - pip install .[complexity]
  script:
  - python -m xenon --max-average B --max-modules C --max-absolute D ${SOURCES}
  allow_failure: true

#############################################
############# BUILD SECTION #################
#############################################
build-package:
  stage: build
  image: python:3.9
  script:
    - pip wheel -w dist --no-deps .
  artifacts:
    paths:
    - dist/

build-doc:
  stage: build
  image: python:3.9
  variables:
    GIT_STRATEGY: none
  before_script:
  - git clone $CI_REPOSITORY_URL
  - cd $CI_PROJECT_NAME
  - git fetch --all
  - git checkout $BRANCH_NAME
  script:
  - pip install .[doc]
  - cd docs
  - sphinx-multiversion source ../../docs/build/html
  - mv source/_redirects ../../docs/build/html
  artifacts:
    expire_in: 1h
    paths:
    - docs/build/html

#############################################
############# DEPLOY SECTION ################
#############################################
deploy-package:
  stage: deploy
  image: python:3.9
  needs: [build-package]
  dependencies:
  - build-package
  script:
    - pip install twine
    - >-
      TWINE_PASSWORD=${CI_REGISTRY_PASSWORD}
      TWINE_USERNAME=${CI_REGISTRY_USER}
      python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  rules:
    - if: $CI_COMMIT_TAG

test-pages:
  stage: deploy
  image: python:3.9
  needs: [build-doc]
  dependencies:
  - build-doc
  script:
    mv docs/build/html test-docs
  artifacts:
    paths:
    - test-docs
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

pages:
  stage: deploy
  image: python:3.9
  needs: [build-doc]
  dependencies:
  - build-doc
  script:
    mv docs/build/html public
  artifacts:
    paths:
    - public
  rules:
  - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "develop") || $CI_COMMIT_TAG

#############################################
############### SONARQUBE ###################
#############################################
sonar-job:
  stage: sonarqube-runner
  image: sonarsource/sonar-scanner-cli
  needs:
  - unit-tests
  - linter
  - security
  dependencies:
  - unit-tests
  - linter
  - security
  variables:
    SONAR_PROJECT_BASE_DIR: "${CI_PROJECT_DIR}"
    GIT_DEPTH: 0
  script:
    - >-
      sonar-scanner -X
      -Dsonar.qualitygate.wait=true
      -Dsonar.host.url=${SQ_URL}
      -Dsonar.login=${SQ_LOGIN}
      -Dsonar.projectKey=${SQ_PROJECTKEY}
      -Dsonar.projectName="${SQ_PROJECTNAME}"
      -Dsonar.links.homepage=${CI_PROJECT_URL}
      -Dsonar.projectBaseDir=${SQ_PROJECTBASE}
      -Dsonar.branch.name=${BRANCH_NAME}
      -Dsonar.sources=${SOURCES}
      -Dsonar.tests=${TESTS}
      -Dsonar.sourceEncoding=${SQ_ENCODING}
      -Dsonar.language=${SQ_LANGUAGE}
      -Dsonar.python.version=3.9
      -Dsonar.python.flake8.reportPaths="linter.txt"
      -Dsonar.python.bandit.reportPaths="vulnerability.json"
      -Dsonar.python.xunit.reportPath="${REPORTS}/TEST-*.xml"
      -Dsonar.python.coverage.reportPaths="${REPORTS}/coverage.xml"
  rules:
  - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "develop") || $CI_COMMIT_TAG
  allow_failure: true
