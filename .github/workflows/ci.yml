name: eopf-cpm ci
on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  pipenv:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ['3.9']
    name: 'pipenv environment'
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pipenv
        run: python -m pip install -U pipenv pip

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-py${{ matrix.python-version }}-${{ hashFiles('**/Pipfile') }}
          restore-keys: |
              ${{ runner.os }}-pipenv-py${{ matrix.python-version }}-

      - name: install deps
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --dev

      - name: Install eopf-cpm
        run: |
          pipenv run pip install --no-deps -e .

      - name: Run tests
        run: pipenv run pytest
          --cov=eopf
          --cov-report=term-missing
          --cov-fail-under=70
          -m unit

      - name: linter
        run: pipenv run flake8 eopf tests

      - name: isort
        run: pipenv run isort eopf tests --check --diff

      - name: formatter
        run: pipenv run black --check .

      - name: security issues
        run: pipenv run bandit -c bandit.yml eopf

      - name: typing
        run: pipenv run mypy eopf

      - name: doctstring coverage
        run: pipenv run docstr-coverage eopf -F 20
        continue-on-error: true

      - name: cyclomatic complexity
        run: pipenv run xenon -a B -m C -b D eopf
        continue-on-error: true

  conda:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ['3.9']
    name: 'conda environment'
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set environment variables
        run: |
          echo "CONDA_ENV_FILE=environment.yaml" >> $GITHUB_ENV
          echo "PYTHON_VERSION=${{ matrix.python-version }}" >> $GITHUB_ENV

      - id: cache-conda
        uses: actions/cache@v2
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-py${{ matrix.python-version }}-${{ hashFiles('environment.yaml') }}
          restore-keys: |
              ${{ runner.os }}-conda-py${{ matrix.python-version }}-

      - uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: environment.yaml
          activate-environment: eopf-dev
          use-only-tar-bz2: true
          auto-update-conda: false
          auto-activate-base: false
          channel-priority: strict

      - name: Install eopf-cpm
        run: python -m pip install --no-deps -e .

      - name: Run tests
        run: python -m pytest
          --cov=eopf
          --cov-report=term-missing
          --cov-fail-under=70
          -m unit

      - name: linter
        run: python -m flake8 eopf tests

      - name: isort
        run: python -m isort eopf tests --check --diff

      - name: formatter
        run: python -m black --check .

      - name: security issues
        run: python -m bandit -c bandit.yml eopf

      - name: typing
        run: python -m mypy eopf

      - name: doctstring coverage
        run: docstr-coverage eopf -F 20
        continue-on-error: true

      - name: cyclomatic complexity
        run: python -m xenon -a B -m C -b D eopf
        continue-on-error: true

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        python-version: ['3.9']
    name: 'check packaging'
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: install flit
        run: python -m pip install flit

      - name: build
        run: python -m flit build
